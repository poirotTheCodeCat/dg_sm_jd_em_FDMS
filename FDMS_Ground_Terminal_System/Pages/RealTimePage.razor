@page "/"
@using FDMS
@implements IDisposable
@inject ITelemetry _db
<div class="page">
    <div class="row switchcontainer">
        <label class="switch">
            <input type="checkbox">
            <span class="slider"></span>
        </label>
        <h5>Real Time Data: </h5>
    </div>
    <div class="datagrid container-fluid">
        
        @if(telemetryData == null)
        {
            <h5>Waiting for incoming messages ... </h5>
        }
        else
        {
            <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" 
                        AllowSorting="true" Data="@telemetryData" TItem="Telemetry" ColumnWidth="100px">
                
                <Columns>
                    <RadzenGridColumn TItem="Telemetry" Property="TailNum" Title="Tail Number"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Telemetry" Property="Accel_x" Title="Accel-X"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Telemetry" Property="Accel_y" Title="Accel-Y"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Telemetry" Property="Accel_z" Title="Accel-Z"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Telemetry" Property="Weight" Title="Weight"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Telemetry" Property="Altitude" Title="Altitude"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Telemetry" Property="Pitch" Title="Pitch"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Telemetry" Property="Bank" Title="Bank"></RadzenGridColumn>
                    <RadzenGridColumn TItem="Telemetry" Property="TimeStamp" Title="Time Stamp"></RadzenGridColumn>
                </Columns>      

            </RadzenGrid>
        }

    </div>
</div>

@code {
    IEnumerable<Telemetry> telemetryData;
    bool isCollecting;
    private List<Telemetry> telemetry;
    Telemetry t;

    protected override async Task OnInitializedAsync()
    {
        // create test data to view the datagrid
        /*
         * There are constructors in each of the objects that will assign values based on parameters. 
         * This should be changed so the curly brackets are removed and variables hold values instead.
         * new Telemetry(tailNum, GForce(x, y, z, weight), Altitude(...)
         */

        telemetry = await _db.GetTelemetry();
        /*
        List<Telemetry> telTest = new List<Telemetry>() { 
            new Telemetry("123", new GForce(0.01, 0.01, 0.01, 100.123), new Altitude(123.21, 0.23, 0.01), DateTime.Now),
            new Telemetry("123", new GForce(0.01, 0.01, 0.01, 100.123), new Altitude(123.21, 0.23, 0.01), DateTime.Now),
            new Telemetry("123", new GForce(0.01, 0.01, 0.01, 100.123), new Altitude(123.21, 0.23, 0.01), DateTime.Now),
            new Telemetry("123", new GForce(0.01, 0.01, 0.01, 100.123), new Altitude(123.21, 0.23, 0.01), DateTime.Now),
            new Telemetry("123", new GForce(0.01, 0.01, 0.01, 100.123), new Altitude(123.21, 0.23, 0.01), DateTime.Now),
            new Telemetry("123", new GForce(0.01, 0.01, 0.01, 100.123), new Altitude(123.21, 0.23, 0.01), DateTime.Now)
        };
        */
        Telemetry t = new Telemetry("NEW", 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, DateTime.Now);
        await _db.InsertTelemetry(t);
        telemetry = await _db.GetTelemetry();
        telemetry.Add(t);
        //telemetryData = telTest;
        telemetryData = telemetry;
        

    }

    private async Task InsertTelemetry()
    {
        Telemetry t = new Telemetry("NEW", 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, DateTime.Now);
        await _db.InsertTelemetry(t);
        telemetry = await _db.GetTelemetry();
        telemetry.Add(t);
    }

    // Used to stop listening and close connection
    public void Dispose()
    {

    }
}
